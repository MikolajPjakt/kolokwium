name: Kolokwium CI/CD

on:
  push:
    branches-ignore:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm test

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: npm install
      - name: Run ESLint
        run: npx eslint .

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker image
        run: docker build -t myapp:latest .
      - name: Save Docker image as tar.gz
        run: docker save myapp:latest | gzip > myapp.tar.gz
      - name: Upload image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: myapp.tar.gz

  staging:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://example-staging-url.com
    steps:
      - name: Manual approval before staging
        run: echo "Czeka na akceptację..."

  production:
    if: github.ref == 'refs/heads/main'
    needs: staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
      - name: Load Docker image
        run: gunzip -c myapp.tar.gz | docker load
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Tag and Push to Docker Hub
        run: |
          docker tag myapp:latest ${{ secrets.DOCKER_USERNAME }}/myapp:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest

  notify:
    needs: [production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create final report
        run: echo "Pipeline zakończony: $(date)" > report.txt
      - name: Upload report
        uses: actions/upload-artifact@v3
        with:
          name: raport-koncowy
          path: report.txt